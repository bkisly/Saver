@using Saver.FinanceService.Contracts.BankAccounts
@inherits ModalFormComponentBase
@inject IBankAccountsApiClient BankAccountsApiClient

<div class="modal fade" id="@FormName" tabindex="-1" aria-labelledby="account-form-title" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="account-form-title">New bank account</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <EditForm FormName="@FormName" EditContext="_editContext" OnValidSubmit="SaveAsync">
                <div class="modal-body">
                    <DataAnnotationsValidator/>
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <InputText class="form-control" @bind-Value="BankAccountViewModel.Name" placeholder="Your bank account name"/>
                        <ValidationMessage For="() => BankAccountViewModel.Name"/>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Initial balance</label>
                        <InputNumber @bind-Value="BankAccountViewModel.InitialBalance" step="0.01" class="form-control"/>
                        <ValidationMessage For="() => BankAccountViewModel.InitialBalance"/>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Currency</label>
                        <InputSelect @bind-Value="BankAccountViewModel.CurrencyCode" class="form-select">
                            @foreach (var supportedCurrency in SupportedCurrencyCodes)
                            {
                                <option value="@supportedCurrency">@supportedCurrency</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => BankAccountViewModel.CurrencyCode" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary rounded-3" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-success rounded-3">Create account</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    public const string FormName = "new-bank-account-form";

    [Parameter, EditorRequired] public IEnumerable<string> SupportedCurrencyCodes { get; set; } = [];
    [Parameter] public EventCallback<NewBankAccountViewModel> OnSave { get; set; }

    private NewBankAccountViewModel BankAccountViewModel { get; set; } = new();
    private EditContext? _editContext;
    private ValidationMessageStore? _messageStore;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(BankAccountViewModel);
        _messageStore = new ValidationMessageStore(_editContext);
        _editContext.OnValidationRequested += (_, _) => _messageStore.Clear();
    }

    private async Task SaveAsync()
    {        
        var request = new CreateManualBankAccountRequest
        {
            Name = BankAccountViewModel.Name,
            InitialBalance = BankAccountViewModel.InitialBalance,
            CurrencyCode = BankAccountViewModel.CurrencyCode
        };

        var response = await BankAccountsApiClient.CreateManualBankAccountAsync(request);

        if (!response.IsSuccessStatusCode)
        {
            return;
        }

        await HideModalAsync(FormName);
        await OnSave.InvokeAsync(BankAccountViewModel);
    }
}
