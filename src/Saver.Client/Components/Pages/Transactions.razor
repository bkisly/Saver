@page "/transactions"
@using Saver.FinanceService.Contracts.BankAccounts
@using Saver.FinanceService.Contracts.Transactions
@using Saver.Client.Components.Forms
@using Saver.FinanceService.Contracts.Categories

@inject IBankAccountsApiClient BankAccountsApiClient
@inject ITransactionsApiClient TransactionsApiClient
@inject ICategoriesApiClient CategoriesApiClient

@attribute [Authorize]

<PageTitle>Transactions</PageTitle>

<h3>Here you can register all of your benefits and expenses.</h3>

@if (_availableAccounts.Count > 0)
{
    <div class="d-flex my-3">
        @if (!SelectedBankAccount.IsExternal)
        {
            <button type="button" class="btn btn-secondary rounded-3 me-2" data-bs-toggle="modal" data-bs-target="#@TransactionForm.FormName" @onclick="SetFormToNewTransaction">
                <span>
                    <i class="bi-plus-lg"></i>
                </span>
                <span>New transaction</span>
            </button>
        }
        <button class="btn btn-secondary rounded-3 me-2 @(CategorizationInProgress ? "disabled" : "")" @onclick="CategorizeTransactionsAsync">
            <span>
                <i class="bi-stars"></i>
            </span>
            <span>Categorize using AI</span>
        </button>
        <a class="btn btn-light rounded-3" href="/categories">
            <span>
                <i class="bi-tags-fill"></i>
            </span>
            <span>Manage categories</span>
        </a>
    </div>

    <InputSelect class="form-select" Value="SelectedBankAccountId" ValueChanged="(Guid id) => OnSelectedAccountChanged(id)" ValueExpression="() => SelectedBankAccountId">
        @foreach (var account in _availableAccounts.OrderByDescending(x => x.IsDefault))
        {
            <option value="@account.Id">@account.Name</option>
        }
    </InputSelect>

    <div class="mt-3">
        @foreach (var transaction in _transactionsForSelectedAccount.OrderByDescending(x => x.CreatedDate))
        {
            <div class="row p-2 my-2 bg-light rounded-3">
                <div class="col-auto my-auto">
                    <i class="bi-cash-coin fs-3"></i>
                </div>
                <div class="col my-auto">
                    <p class="fs-5 fw-medium m-0">@transaction.Name</p>
                    <div class="my-1 d-flex text-muted">
                        <span>@transaction.CreatedDate</span>
                        
                        @if (transaction.Description is not null)
                        {
                            <span class="vr mx-2"></span>
                            <span>@transaction.Description</span>
                        }

                        @if (transaction.Category is not null)
                        {
                            <span class="vr mx-2"></span>
                            <span>@transaction.Category.Name</span>
                        }

                    </div>
                </div>
                <div class="col-auto my-auto d-flex justify-content-end text-end">
                    <p class="h5 my-auto me-3 @(transaction.Value > 0 ? "text-black" : "text-danger")">@transaction.Value.ToCurrencyString(SelectedBankAccount.CurrencyCode)</p>
                    <button type="button" class="border-0 bg-transparent my-auto text-black" data-bs-toggle="modal" data-bs-target="#@(TransactionForm.FormName)" @onclick="() => SelectTransactionToEdit(transaction.Id)">
                        <i class="fs-5 bi-pen"></i>
                    </button>
                    @if (!SelectedBankAccount.IsExternal)
                    {
                        <button type="button" class="border-0 bg-transparent my-auto text-black" data-bs-toggle="modal" data-bs-target="#delete-modal" @onclick="() => SelectTransactionToDelete(transaction.Id)">
                            <i class="fs-5 bi-trash"></i>
                        </button>
                    }
                </div>
            </div>
        }
    </div>

    <TransactionForm 
        @ref="_transactionForm" 
        Categories="_availableCategories" 
        AccountId="SelectedBankAccountId"
        OnSave="HandleTransactionSaved"/>

    <!-- Delete confirmation modal -->
    <div class="modal fade" id="delete-modal" tabindex="-1" aria-labelledby="delete-confirmation-title" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="delete-confirmation-title">Delete confirmation</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>
                        <span>Are you sure you want to delete this transaction</span>
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary rounded-3" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger rounded-3" data-bs-dismiss="modal" @onclick="DeleteTransactionAsync">I understand, delete.</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p>No accounts available.</p>
}

@code {
    private Guid SelectedBankAccountId { get; set; }
    private BankAccountDto SelectedBankAccount { get; set; } = null!;
    private List<BankAccountDto> _availableAccounts = [];
    private List<TransactionDto> _transactionsForSelectedAccount = [];
    private List<CategoryDto> _availableCategories = [];
    private TransactionForm _transactionForm = null!;

    private Guid _transactionIdToDelete;
    private bool CategorizationInProgress { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _availableAccounts = (await BankAccountsApiClient.GetBankAccountsAsync()).Content?.ToList() ?? [];
        _availableCategories = (await CategoriesApiClient.GetCategoriesAsync()).Content?.ToList() ?? [];

        if (_availableAccounts.Count > 0)
        {
            SelectedBankAccountId = _availableAccounts.First().Id;
            SelectedBankAccount = _availableAccounts.Single(x => x.Id == SelectedBankAccountId);
            _transactionsForSelectedAccount = (await TransactionsApiClient.GetTransactionsForAccountAsync(SelectedBankAccountId)).Content?.ToList() ?? [];
        }
    }

    private async Task OnSelectedAccountChanged(Guid accountId)
    {
        SelectedBankAccountId = accountId;
        SelectedBankAccount = _availableAccounts.Single(x => x.Id == accountId);
        _transactionForm.IsFromExternalAccount = SelectedBankAccount.IsExternal;
        _transactionsForSelectedAccount = (await TransactionsApiClient.GetTransactionsForAccountAsync(accountId)).Content?.ToList() ?? [];
    }

    private async Task HandleTransactionSaved(TransactionViewModel obj)
    {
        _transactionsForSelectedAccount = (await TransactionsApiClient.GetTransactionsForAccountAsync(SelectedBankAccountId)).Content?.ToList() ?? [];
        StateHasChanged();
    }

    private void SelectTransactionToEdit(Guid transactionId)
    {
        _transactionForm.LoadTransactionFromDto(_transactionsForSelectedAccount.Single(x => x.Id == transactionId));
    }

    private void SelectTransactionToDelete(Guid transactionId)
    {
        _transactionIdToDelete = transactionId;
    }

    private async Task DeleteTransactionAsync()
    {
        await TransactionsApiClient.DeleteTransactionAsync(_transactionIdToDelete);
        _transactionsForSelectedAccount = (await TransactionsApiClient.GetTransactionsForAccountAsync(SelectedBankAccountId)).Content?.ToList() ?? [];
        StateHasChanged();
    }

    private void SetFormToNewTransaction()
    {
        _transactionForm.ClearForm();
    }

    private async Task CategorizeTransactionsAsync()
    {
        CategorizationInProgress = true;
        await TransactionsApiClient.AutoCategorizeTransactionsAsync(SelectedBankAccountId);
        CategorizationInProgress = false;
        _transactionsForSelectedAccount = (await TransactionsApiClient.GetTransactionsForAccountAsync(SelectedBankAccountId)).Content?.ToList() ?? [];
        StateHasChanged();
    }
}
