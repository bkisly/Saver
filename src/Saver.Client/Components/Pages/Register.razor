@page "/register"
@using Microsoft.AspNetCore.Authorization
@using Saver.IdentityService.Contracts

@implements IDisposable

@inject IHttpContextAccessor HttpContextAccessor
@inject IIdentityApiClient IdentityApiClient
@inject NavigationManager NavigationManager

@attribute [AllowAnonymous]

<PageTitle>Register</PageTitle>

<div class="align-content-center bg-light rounded-3 p-3 m-4">
    <h1 class="h3 text-center">Register</h1>
    
    <EditForm class="mt-3" EditContext="_editContext" FormName="RegistrationForm" OnValidSubmit="RegisterAsync">
        <DataAnnotationsValidator/>
        
        <div class="mt-2">
            <label class="form-label">E-mail</label>
            <InputText class="form-control" @bind-Value="RegistrationViewModel.Email"/>
            <ValidationMessage For="() => RegistrationViewModel.Email"/>
        </div>
        <div class="mt-2">
            <label class="form-label">Password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationViewModel.Password"/>
            <ValidationMessage For="() => RegistrationViewModel.Password"/>
        </div>
        <div class="mt-2">
            <label class="form-label">Confirm password</label>
            <InputText class="form-control" type="password" @bind-Value="RegistrationViewModel.ConfirmPassword"/>
            <ValidationMessage For="() => RegistrationViewModel.ConfirmPassword"/>
        </div>
        
        <div class="mt-4">
            <ValidationMessage For="() => RegistrationViewModel"/>
            <button type="submit" class="btn btn-lg btn-success rounded-3 w-100 @(IsRegistering ? "disabled" : "")">
                @if (IsRegistering)
                {
                    <span>Please wait...</span>
                }
                else
                {
                    <span>Register</span>
                }
            </button>
        </div>
    </EditForm>
</div>

@code {
    private EditContext? _editContext;
    private ValidationMessageStore? _messageStore;

    private bool IsRegistering { get; set; }

    [SupplyParameterFromForm(FormName = "RegistrationForm")]
    private RegistrationViewModel RegistrationViewModel { get; set; } = null!;


    protected override void OnInitialized()
    {
        if (HttpContextAccessor.HttpContext?.User.Identity?.IsAuthenticated == true)
        {
            NavigationManager.NavigateTo("/");
        }

        RegistrationViewModel = new RegistrationViewModel();
        _editContext = new EditContext(RegistrationViewModel);
        _editContext.OnValidationRequested += HandleValidationRequested;
        _messageStore = new ValidationMessageStore(_editContext);
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _messageStore?.Clear();

        if (RegistrationViewModel.Password != RegistrationViewModel.ConfirmPassword)
        {
            _messageStore?.Add(() => RegistrationViewModel.ConfirmPassword, "Passwords do not match.");
        }
    }

    private async Task RegisterAsync()
    {
        IsRegistering = true;
        var request = new RegistrationRequest
        {
            Email = RegistrationViewModel.Email,
            Password = RegistrationViewModel.Password
        };

        var response = await IdentityApiClient.RegisterAsync(request);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            _messageStore?.Add(() => RegistrationViewModel, "Invalid data.");
            RegistrationViewModel.Password = string.Empty;
            RegistrationViewModel.ConfirmPassword = string.Empty;
        }

        IsRegistering = false;
    }

    public void Dispose()
    {
        if (_editContext is not null)
        {
            _editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}
