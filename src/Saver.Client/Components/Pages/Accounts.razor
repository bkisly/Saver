@page "/accounts"
@using Saver.FinanceService.Contracts.BankAccounts
@using Saver.Client.Components.Forms
@using Saver.FinanceService.Contracts.Currency

@attribute [Authorize]

@inject IBankAccountsApiClient BankAccountsApiClient
@inject ICurrencyApiClient CurrencyApiClient

<PageTitle>Accounts</PageTitle>

<h1 class="h3">Manage and create your bank accounts here.</h1>

<div class="my-3 d-flex">
    <button type="button" class="btn btn-secondary rounded-3 me-2" data-bs-toggle="modal" data-bs-target="#@NewBankAccountForm.FormName">
        <span>
            <i class="bi-plus-lg"></i>
        </span>
        <span>New manual bank account</span>
    </button>
    <button type="button" class="btn btn-secondary rounded-3 me-2" data-bs-toggle="modal" data-bs-target="#@NewExternalBankAccountForm.FormName">
        <span>
            <i class="bi-box-arrow-up-right me-1"></i>
        </span>
        <span>New external bank account</span>
    </button>
</div>


<div class="mx-2">
    @if (!BankAccounts.Any())
    {
        <p>No bank accounts</p>
    }
    else
    {
        @foreach (var account in BankAccounts.OrderByDescending(x => x.IsDefault))
        {
            <div class="row p-2 my-2 bg-light rounded-3">
                <div class="col-auto my-auto">
                    <i class="bi-bank fs-3"></i>
                </div>
                <div class="col my-auto">
                    <p class="fs-5 fw-medium m-0">@account.Name</p>
                    <span class="my-1">Balance: @account.Balance.ToCurrencyString(account.CurrencyCode)</span>
                </div>
                <div class="col-auto my-auto justify-content-end text-end">
                    <button class="border-0 bg-transparent my-auto mx-2 text-black" @onclick="() => MarkAccountAsDefaultAsync(account.Id)">
                        <i class="fs-5 @(account.IsDefault ? "bi-star-fill" : "bi-star")"></i>
                    </button>
                    @if (!account.IsExternal)
                    {
                        <button type="button" class="border-0 bg-transparent my-auto text-black" data-bs-toggle="modal" data-bs-target="#@EditBankAccountForm.FormName" @onclick="() => SelectAccountForEdit(account.Id)">
                            <i class="fs-5 bi-pen"></i>
                        </button>
                    }
                    <button type="button" class="border-0 bg-transparent my-auto text-black" data-bs-toggle="modal" data-bs-target="#delete-modal" @onclick="() => SelectAccount(account.Id)">
                        <i class="fs-5 bi-trash"></i>
                    </button>
                </div>
            </div>
        }
    }
</div>

<NewBankAccountForm 
    SupportedCurrencyCodes="_supportedCurrencyCodes" 
    OnSave="HandleBankAccountCreatedAsync"/>

<EditBankAccountForm
    @ref="_editForm"
    SupportedCurrencyCodes="_supportedCurrencyCodes"
    OnSave="HandleBankAccountEditedAsync"/>

<NewExternalBankAccountForm/>

<!-- Delete confirmation modal -->
<div class="modal fade" id="delete-modal" tabindex="-1" aria-labelledby="delete-confirmation-title" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="delete-confirmation-title">Delete confirmation</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>
                    <span>Are you sure you want to delete this account? This will delete all data related to this account.</span>
                    <strong>This operation is irreversible.</strong>
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary rounded-3" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger rounded-3" data-bs-dismiss="modal" @onclick="DeleteAccountAsync">I understand, delete.</button>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<BankAccountDto> BankAccounts { get; set; } = [];
    private BankAccountDto? SelectedBankAccount { get; set; }
    private List<string> _supportedCurrencyCodes = [];

    private EditBankAccountForm _editForm = null!;

    protected override async Task OnInitializedAsync()
    {
        BankAccounts = (await BankAccountsApiClient.GetBankAccountsAsync()).Content ?? [];
        _supportedCurrencyCodes = (await CurrencyApiClient.GetSupportedCurrenciesAsync()).Content?.ToList() ?? [];
    }

    private void SelectAccount(Guid accountId)
    {
        SelectedBankAccount = BankAccounts.SingleOrDefault(x => x.Id == accountId);
    }

    private void SelectAccountForEdit(Guid accountId)
    {
        SelectAccount(accountId);

        if (SelectedBankAccount is not null)
        {
            _editForm.LoadBankAccountFromDto(SelectedBankAccount);
        }
    }

    private async Task MarkAccountAsDefaultAsync(Guid accountId)
    {
        await BankAccountsApiClient.SetAccountAsDefaultAsync(accountId);
        await RefreshAccountsAsync();
    }

    private async Task DeleteAccountAsync()
    {
        if (SelectedBankAccount is null)
        {
            return;
        }

        await BankAccountsApiClient.DeleteBankAccountAsync(SelectedBankAccount.Id);
        await RefreshAccountsAsync();
    }

    private async Task RefreshAccountsAsync()
    {
        BankAccounts = [];
        StateHasChanged();
        BankAccounts = (await BankAccountsApiClient.GetBankAccountsAsync()).Content ?? [];
        StateHasChanged();
    }

    private async Task HandleBankAccountCreatedAsync(NewBankAccountViewModel bankAccountViewModel)
    {
        await RefreshAccountsAsync();
    }

    private async Task HandleBankAccountEditedAsync(EditBankAccountViewModel bankAccountViewModel)
    {
        await RefreshAccountsAsync();
    }
}
